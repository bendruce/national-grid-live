import { NextApiRequest, NextApiResponse } from "next";
import { rateLimiter } from "../../utils/limiter";

/**
 * @typedef GenerationMixItem
 * @description Represents each item in the generation mix returned by the Carbon Intensity API.
 * Each item includes the type of fuel (e.g., coal, gas) and its associated carbon intensity percentage.
 * @property {string} fuel - The type of fuel (e.g., coal, gas, wind).
 * @property {number} carbonIntensityPercentage - The percentage of carbon intensity for the given fuel type.
 */
type GenerationMixItem = {
  fuel: string;
  carbonIntensityPercentage: number;
};

/**
 * @constant {string} CARBON_INTENSITY_API_URL
 * @description API endpoint for fetching the current UK electricity generation mix and its carbon intensity.
 * The Carbon Intensity API provides data on how much electricity is being generated by different fuel sources and
 * the associated carbon emissions.
 */
const CARBON_INTENSITY_API_URL =
  "https://api.carbonintensity.org.uk/generation";

/**
 * @function handler
 * @description This handler is responsible for processing requests to the `/api/energy-mix` endpoint.
 * It fetches the electricity generation mix data from the Carbon Intensity API, maps the data into a more readable format,
 * and then returns it to the client. If an error occurs while fetching the data, it responds with a 500 status and an error message.
 *
 * @param {NextApiRequest} req - The incoming request object from Next.js API route.
 * @param {NextApiResponse} res - The outgoing response object for sending data back to the client.
 *
 * @returns {void} Responds with the generation mix data or an error if the fetch fails.
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Apply the rate limiter middleware
  await new Promise((resolve, reject) => {
    rateLimiter(req as any, res as any, (result: any) => {
      if (result instanceof Error) {
        return reject(result);
      }
      resolve(result);
    });
  });
  try {
    // Fetch data from the Carbon Intensity API
    const carbonResponse = await fetch(CARBON_INTENSITY_API_URL);
    const carbonData = await carbonResponse.json();

    // Check if the response was successful, if not, return a 500 error
    if (!carbonResponse.ok) {
      return res
        .status(500)
        .json({ error: "Failed to fetch data from Carbon Intensity API" });
    }

    // Extract the generation mix from the API response
    const carbonGenerationMix = carbonData.data.generationmix;

    // Initialize a variable to track the total percentage
    let totalPercentage = 0;

    /**
     * @function map
     * @description Maps the generation mix data into an array of GenerationMixItem objects.
     * It calculates the total carbon intensity percentage for all fuel sources.
     */
    const generationMixArray: GenerationMixItem[] = carbonGenerationMix.map(
      (item: any) => {
        const { fuel, perc } = item;
        totalPercentage += perc;
        return {
          fuel: fuel.toLowerCase(),
          carbonIntensityPercentage: perc,
        };
      }
    );

    // Return the mapped generation mix array as a JSON response
    res.status(200).json(generationMixArray);
  } catch (error) {
    // Handle any errors that occur during the fetch process
    console.error("Error fetching data:", error);
    res.status(500).json({ error: "An error occurred while fetching data" });
  }
}
